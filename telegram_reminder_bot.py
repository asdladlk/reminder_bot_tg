import asyncio
import sqlite3
import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re
import schedule
import time
from threading import Thread
import json
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ReminderBot:
    def __init__(self, token: str):
        self.token = token
        self.db_path = "reminders.db"
        self.init_database()
    
    def get_user_timezone(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return 'Europe/Moscow'
    
    def set_user_timezone(self, user_id: int, timezone: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                timezone TEXT DEFAULT 'Europe/Moscow',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_settings (user_id, timezone)
            VALUES (?, ?)
        ''', (user_id, timezone))
        
        conn.commit()
        conn.close()
    
    def get_local_time(self, user_id: int) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        return datetime.now(moscow_tz)
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                message TEXT NOT NULL,
                reminder_time TEXT NOT NULL,
                frequency TEXT NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_sent TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                timezone TEXT DEFAULT 'Europe/Moscow',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def add_reminder(self, user_id: int, message: str, reminder_time: str, frequency: str) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: user_id={user_id}, message='{message}', time='{reminder_time}', frequency='{frequency}'")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO reminders (user_id, message, reminder_time, frequency)
            VALUES (?, ?, ?, ?)
        ''', (user_id, message, reminder_time, frequency))
        
        reminder_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {reminder_id}")
        return reminder_id
    
    def get_user_reminders(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, message, reminder_time, frequency, is_active, created_at
            FROM reminders 
            WHERE user_id = ? AND is_active = 1
            ORDER BY created_at DESC
        ''', (user_id,))
        
        reminders = []
        for row in cursor.fetchall():
            reminders.append({
                'id': row[0],
                'message': row[1],
                'reminder_time': row[2],
                'frequency': row[3],
                'is_active': row[4],
                'created_at': row[5]
            })
        
        conn.close()
        return reminders
    
    def delete_reminder(self, reminder_id: int, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            DELETE FROM reminders 
            WHERE id = ? AND user_id = ?
        ''', (reminder_id, user_id))
        
        deleted = cursor.rowcount > 0
        conn.commit()
        conn.close()
        
        return deleted
    
    def parse_time_input(self, time_str: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        time_str = time_str.strip().lower()
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏)
        once_patterns = [
            r'—á–µ—Ä–µ–∑ (\d+) (–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)',
            r'(\d{1,2})\.(\d{1,2})\.(\d{4}) –≤ (\d{1,2}):(\d{2})',  # –¥–∞—Ç–∞ —Å –≥–æ–¥–æ–º
            r'(\d{1,2})\.(\d{1,2}) –≤ (\d{1,2}):(\d{2})',  # –¥–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞ (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            r'(\d{1,2})/(\d{1,2})/(\d{4}) –≤ (\d{1,2}):(\d{2})',  # —Ñ–æ—Ä–º–∞—Ç –¥–¥/–º–º/–≥–≥–≥–≥
            r'(\d{1,2})/(\d{1,2}) –≤ (\d{1,2}):(\d{2})',  # —Ñ–æ—Ä–º–∞—Ç –¥–¥/–º–º (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            r'–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2})',
            r'–≤ (\d{1,2}):(\d{2})'  # –æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–µ–º–µ–Ω–∏ –∏–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        periodic_patterns = [
            r'–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ (\d{1,2}):(\d{2})',
            r'(\d+) —Ä–∞–∑ –≤ –¥–µ–Ω—å',
            r'(\d+) —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ (\d{1,2}):(\d{2})',
            r'–ø–æ –±—É–¥–Ω—è–º –≤ (\d{1,2}):(\d{2})',
            r'–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –≤ (\d{1,2}):(\d{2})',
            r'–ø–æ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ (\d{1,2}):(\d{2})',
            r'–ø–æ (–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å) –≤ (\d{1,2}):(\d{2})',
            r'–∫–∞–∂–¥—ã–π (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ (\d{1,2}):(\d{2})',
            r'–∫–∞–∂–¥—ã–π (–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å) –≤ (\d{1,2}):(\d{2})'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –°–ù–ê–ß–ê–õ–ê (–æ–Ω–∏ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
        for i, pattern in enumerate(periodic_patterns):
            match = re.search(pattern, time_str)
            if match:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω {i+1}: {pattern}, –≥—Ä—É–ø–ø—ã: {match.groups()}")
                result = self._parse_periodic_reminder(match, pattern)
                logger.info(f"üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")
                return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for i, pattern in enumerate(once_patterns):
            match = re.search(pattern, time_str)
            if match:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω {i+1}: {pattern}, –≥—Ä—É–ø–ø—ã: {match.groups()}")
                result = self._parse_once_reminder(match, pattern)
                logger.info(f"üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")
                return result
        
        logger.info("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        return None
    
    def _parse_once_reminder(self, match, pattern):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if '—á–µ—Ä–µ–∑' in pattern:
            amount = int(match.group(1))
            unit = match.group(2)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            moscow_tz = pytz.timezone('Europe/Moscow')
            now = datetime.now(moscow_tz)
            if '–º–∏–Ω—É—Ç' in unit:
                reminder_time = now + timedelta(minutes=amount)
            elif '—á–∞—Å' in unit:
                reminder_time = now + timedelta(hours=amount)
            elif '–¥–µ–Ω—å' in unit:
                reminder_time = now + timedelta(days=amount)
            
            return {
                'type': 'once',
                'time': reminder_time.strftime('%Y-%m-%d %H:%M'),
                'frequency': 'once'
            }
        
        elif '–∑–∞–≤—Ç—Ä–∞' in pattern:
            hour = int(match.group(1))
            minute = int(match.group(2))
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            moscow_tz = pytz.timezone('Europe/Moscow')
            tomorrow = datetime.now(moscow_tz) + timedelta(days=1)
            reminder_time = tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            return {
                'type': 'once',
                'time': reminder_time.strftime('%Y-%m-%d %H:%M'),
                'frequency': 'once'
            }
        
        elif '–≤' in pattern and len(match.groups()) == 2:
            hour = int(match.group(1))
            minute = int(match.group(2))
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            moscow_tz = pytz.timezone('Europe/Moscow')
            today = datetime.now(moscow_tz)
            reminder_time = today.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if reminder_time <= today:
                reminder_time += timedelta(days=1)
            
            return {
                'type': 'once',
                'time': reminder_time.strftime('%Y-%m-%d %H:%M'),
                'frequency': 'once'
            }
        
        elif len(match.groups()) == 5:  # —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥ –≤ —á—á:–º–º
            day = int(match.group(1))
            month = int(match.group(2))
            year = int(match.group(3))
            hour = int(match.group(4))
            minute = int(match.group(5))
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                moscow_tz = pytz.timezone('Europe/Moscow')
                reminder_time = datetime(year, month, day, hour, minute)
                reminder_time = moscow_tz.localize(reminder_time)
                
                return {
                    'type': 'once',
                    'time': reminder_time.strftime('%Y-%m-%d %H:%M'),
                    'frequency': 'once'
                }
            except ValueError:
                return None
        
        elif len(match.groups()) == 4:  # —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º –≤ —á—á:–º–º (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            day = int(match.group(1))
            month = int(match.group(2))
            hour = int(match.group(3))
            minute = int(match.group(4))
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                moscow_tz = pytz.timezone('Europe/Moscow')
                current_year = datetime.now(moscow_tz).year
                reminder_time = datetime(current_year, month, day, hour, minute)
                reminder_time = moscow_tz.localize(reminder_time)
                
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                if reminder_time < datetime.now(moscow_tz):
                    reminder_time = reminder_time.replace(year=current_year + 1)
                
                return {
                    'type': 'once',
                    'time': reminder_time.strftime('%Y-%m-%d %H:%M'),
                    'frequency': 'once'
                }
            except ValueError:
                return None
        
        return None
    
    def _parse_periodic_reminder(self, match, pattern):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: pattern='{pattern}', groups={match.groups()}")
        
        if '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' in pattern:
            hour = int(match.group(1))
            minute = int(match.group(2))
            
            return {
                'type': 'periodic',
                'time': f"{hour:02d}:{minute:02d}",
                'frequency': 'daily'
            }
        
        elif '—Ä–∞–∑ –≤ –¥–µ–Ω—å' in pattern:
            times_per_day = int(match.group(1))
            
            return {
                'type': 'periodic',
                'time': '09:00',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 9 —É—Ç—Ä–∞
                'frequency': f'{times_per_day}_times_daily'
            }
        
        elif '—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é' in pattern:
            times_per_week = int(match.group(1))
            hour = int(match.group(2))
            minute = int(match.group(3))
            
            return {
                'type': 'periodic',
                'time': f"{hour:02d}:{minute:02d}",
                'frequency': f'{times_per_week}_times_weekly'
            }
        
        elif '–±—É–¥–Ω—è–º' in pattern:
            hour = int(match.group(1))
            minute = int(match.group(2))
            
            return {
                'type': 'periodic',
                'time': f"{hour:02d}:{minute:02d}",
                'frequency': 'weekdays'
            }
        
        elif '–≤—ã—Ö–æ–¥–Ω—ã–º' in pattern:
            hour = int(match.group(1))
            minute = int(match.group(2))
            
            return {
                'type': 'periodic',
                'time': f"{hour:02d}:{minute:02d}",
                'frequency': 'weekends'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ, –∞ –Ω–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        day_name = match.group(1).lower()
        hour = int(match.group(2))
        minute = int(match.group(3))
        
        day_mapping = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'monday',
            '–ø–Ω': 'monday',
            '–≤—Ç–æ—Ä–Ω–∏–∫': 'tuesday', 
            '–≤—Ç': 'tuesday',
            '—Å—Ä–µ–¥–∞': 'wednesday',
            '—Å—Ä': 'wednesday',
            '—á–µ—Ç–≤–µ—Ä–≥': 'thursday',
            '—á—Ç': 'thursday',
            '–ø—è—Ç–Ω–∏—Ü–∞': 'friday',
            '–ø—Ç': 'friday',
            '—Å—É–±–±–æ—Ç–∞': 'saturday',
            '—Å–±': 'saturday',
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sunday',
            '–≤—Å': 'sunday'
        }
        
        if day_name in day_mapping:
            frequency = day_mapping[day_name]
            result = {
                'type': 'periodic',
                'time': f"{hour:02d}:{minute:02d}",
                'frequency': frequency
            }
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ '{day_name}' -> '{frequency}': {result}")
            return result
        
        return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = ReminderBot("YOUR_BOT_TOKEN_HERE")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üìù **–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ [—Ç–µ–∫—Å—Ç] [–≤—Ä–µ–º—è]"

**–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ –†–∞–∑–æ–≤–æ: "–≤ 15:30", "–∑–∞–≤—Ç—Ä–∞ –≤ 10:00", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞: "9.10.2025 –≤ 12:00", "15.03 –≤ 14:30", "25/12/2024 –≤ 18:00"
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00"
‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å: "3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"
‚Ä¢ –ü–æ –±—É–¥–Ω—è–º: "–ø–æ –±—É–¥–Ω—è–º –≤ 18:00"
‚Ä¢ –ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º: "–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –≤ 10:00"
‚Ä¢ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: "–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00", "–∫–∞–∂–¥—ã–π –ø—Ç –≤ 16:30"

**–ö–æ–º–∞–Ω–¥—ã:**
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/help - –ø–æ–º–æ—â—å
/delete [–Ω–æ–º–µ—Ä] - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/timezone - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
/test - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/debug - –æ—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è! üöÄ
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**
–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ [—Ç–µ–∫—Å—Ç] [–≤—Ä–µ–º—è]"

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ 19:00"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 14:30"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ —Å—ä–æ–¥–∏—Ç—å –∫ –≤—Ä–∞—á—É 9.10.2025 –≤ 12:00"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è 15.03 –≤ 10:00"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –ø–∏—Ç—å –≤–æ–¥—É 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 18:00"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–≤–æ–Ω–æ–∫ –∫–∞–∂–¥—ã–π –ø—Ç –≤ 16:00"

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/delete [–Ω–æ–º–µ—Ä] - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
/timezone - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
/test - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/debug - –æ—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**
‚Ä¢ –†–∞–∑–æ–≤—ã–µ - —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
‚Ä¢ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –≤ –±—É–¥–Ω–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ
‚Ä¢ –ü–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–Ω—è–º - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫, —Å—Ä–µ–¥–∞, —á–µ—Ç–≤–µ—Ä–≥, –ø—è—Ç–Ω–∏—Ü–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    """
    await update.message.reply_text(help_text)

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    user_id = update.effective_user.id
    reminders = bot.get_user_reminders(user_id)
    
    if not reminders:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    text = "üìã **–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
    for i, reminder in enumerate(reminders, 1):
        text += f"{i}. {reminder['message']}\n"
        text += f"   ‚è∞ {reminder['reminder_time']}\n"
        text += f"   üîÑ {reminder['frequency']}\n"
        text += f"   üìÖ –°–æ–∑–¥–∞–Ω–æ: {reminder['created_at']}\n\n"
    
    await update.message.reply_text(text)

async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /delete 1")
        return
    
    try:
        reminder_num = int(context.args[0])
        reminders = bot.get_user_reminders(user_id)
        
        if reminder_num < 1 or reminder_num > len(reminders):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return
        
        reminder_id = reminders[reminder_num - 1]['id']
        success = bot.delete_reminder(reminder_id, user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_num} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def timezone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timezone"""
    user_id = update.effective_user.id
    
    if not context.args:
        current_tz = bot.get_user_timezone(user_id)
        local_time = bot.get_local_time(user_id)
        
        text = f"üïê **–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {current_tz}\n"
        text += f"üïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {local_time.strftime('%H:%M:%S %d.%m.%Y')}\n\n"
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞:**\n"
        text += "‚Ä¢ `/timezone Europe/Moscow` - –ú–æ—Å–∫–≤–∞\n"
        text += "‚Ä¢ `/timezone Europe/Kiev` - –ö–∏–µ–≤\n"
        text += "‚Ä¢ `/timezone Europe/Minsk` - –ú–∏–Ω—Å–∫\n"
        text += "‚Ä¢ `/timezone Europe/London` - –õ–æ–Ω–¥–æ–Ω\n"
        text += "‚Ä¢ `/timezone America/New_York` - –ù—å—é-–ô–æ—Ä–∫\n"
        text += "‚Ä¢ `/timezone Asia/Tokyo` - –¢–æ–∫–∏–æ\n"
        text += "‚Ä¢ `/timezone Asia/Shanghai` - –ü–µ–∫–∏–Ω\n"
        text += "‚Ä¢ `/timezone Australia/Sydney` - –°–∏–¥–Ω–µ–π\n\n"
        text += "**–ü—Ä–∏–º–µ—Ä:** `/timezone Europe/Moscow`"
        
        await update.message.reply_text(text)
        return
    
    timezone = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        pytz.timezone(timezone)
        bot.set_user_timezone(user_id, timezone)
        local_time = bot.get_local_time(user_id)
        
        text = f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}\n"
        text += f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {local_time.strftime('%H:%M:%S %d.%m.%Y')}"
        
        await update.message.reply_text(text)
    except pytz.exceptions.UnknownTimeZoneError:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/timezone` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤–ø–µ—Ä–µ–¥ (–≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
        moscow_tz = pytz.timezone('Europe/Moscow')
        test_time = datetime.now(moscow_tz) + timedelta(minutes=1)
        reminder_id = bot.add_reminder(
            user_id, 
            "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", 
            test_time.strftime('%Y-%m-%d %H:%M'), 
            'once'
        )
        
        await update.message.reply_text(
            f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üÜî ID: {reminder_id}\n"
            f"‚è∞ –í—Ä–µ–º—è: {test_time.strftime('%H:%M:%S %d.%m.%Y')}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É..."
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /debug –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    
    try:
        conn = sqlite3.connect(bot.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT id, message, reminder_time, frequency, is_active, created_at, last_sent
            FROM reminders 
            WHERE user_id = ?
            ORDER BY created_at DESC
            LIMIT 10
        ''', (user_id,))
        
        reminders = cursor.fetchall()
        conn.close()
        
        if not reminders:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        text = "üîç **–û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
        for reminder in reminders:
            reminder_id, message, reminder_time, frequency, is_active, created_at, last_sent = reminder
            text += f"üÜî ID: {reminder_id}\n"
            text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {reminder_time}\n"
            text += f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {frequency}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ: {bool(is_active)}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            text += f"üì§ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent or '–ù–∏–∫–æ–≥–¥–∞'}\n\n"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –±–æ—Ç–µ"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    if not context.args or context.args[0] != "TheRules":
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return
    
    try:
        conn = sqlite3.connect(bot.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            SELECT id, user_id, message, reminder_time, frequency, is_active, created_at, last_sent
            FROM reminders 
            ORDER BY created_at DESC
            LIMIT 50
        ''')
        
        reminders = cursor.fetchall()
        conn.close()
        
        if not reminders:
            await update.message.reply_text("üì≠ –í –±–æ—Ç–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        
        text = "üîê **–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å - –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
        for reminder in reminders:
            reminder_id, user_id, message, reminder_time, frequency, is_active, created_at, last_sent = reminder
            text += f"üÜî ID: {reminder_id}\n"
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {reminder_time}\n"
            text += f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {frequency}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ: {bool(is_active)}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            text += f"üì§ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent or '–ù–∏–∫–æ–≥–¥–∞'}\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 3500:
                text += "... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)"
                break
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if message_text.lower().startswith('–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ'):
        reminder_text = message_text[12:].strip()  
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ
        time_info = bot.parse_time_input(reminder_text)
        
        if time_info:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
            text_without_time = reminder_text
            logger.info(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '{reminder_text}'")
            
            for pattern in [
                r'\s+—á–µ—Ä–µ–∑\s+\d+\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)',
                r'\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+–∑–∞–≤—Ç—Ä–∞\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+\d{1,2}\.\d{1,2}\.\d{4}\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+\d{1,2}\.\d{1,2}\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+\d{1,2}/\d{1,2}/\d{4}\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+\d{1,2}/\d{1,2}\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+\d{1,2}:\d{2}',
                r'\s+\d+\s+—Ä–∞–∑\s+–≤\s+(–¥–µ–Ω—å|–Ω–µ–¥–µ–ª—é)',
                r'\s+–ø–æ\s+(–±—É–¥–Ω—è–º|–≤—ã—Ö–æ–¥–Ω—ã–º)\s+–≤\s+\d{1,2}:\d{2}'
            ]:
                old_text = text_without_time
                text_without_time = re.sub(pattern, '', text_without_time, flags=re.IGNORECASE)
                if old_text != text_without_time:
                    logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}': '{old_text}' -> '{text_without_time}'")
            
            reminder_message = text_without_time.strip()
            logger.info(f"üìù –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{reminder_message}'")
            
            if reminder_message:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                reminder_id = bot.add_reminder(
                    user_id, 
                    reminder_message, 
                    time_info['time'], 
                    time_info['frequency']
                )
                
                response = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                response += f"üìù –¢–µ–∫—Å—Ç: {reminder_message}\n"
                response += f"‚è∞ –í—Ä–µ–º—è: {time_info['time']}\n"
                response += f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {time_info['frequency']}\n"
                response += f"üÜî ID: {reminder_id}"
                
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –≤ 15:30\n‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00\n‚Ä¢ 9.10.2025 –≤ 12:00\n‚Ä¢ 15.03 –≤ 14:30\n‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00\n‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞")
    else:
        await update.message.reply_text("ü§ñ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ [—Ç–µ–∫—Å—Ç] [–≤—Ä–µ–º—è]\"\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")

class SchedulerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self, bot_instance, application):
        self.bot_instance = bot_instance
        self.application = application
        self.running = False
        
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        scheduler_thread = Thread(target=self._run_scheduler, daemon=True)
        scheduler_thread.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                self._check_and_send_reminders()
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)
    
    def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.bot_instance.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        cursor.execute('''
            SELECT id, user_id, message, reminder_time, frequency, last_sent
            FROM reminders 
            WHERE is_active = 1
        ''')
        
        reminders = cursor.fetchall()
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(reminders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        for reminder in reminders:
            reminder_id, user_id, message, reminder_time, frequency, last_sent = reminder
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_tz = self.bot_instance.get_user_timezone(user_id)
                tz = pytz.timezone(user_tz)
                current_time = datetime.now(tz)
                
                logger.info(f"üîç –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}: –≤—Ä–µ–º—è_–∏–∑_–ë–î='{reminder_time}', —á–∞—Å—Ç–æ—Ç–∞='{frequency}', —Ç–µ–∫—É—â–µ–µ_–≤—Ä–µ–º—è={current_time}")
                
                should_send = self._should_send_reminder(reminder_time, frequency, last_sent, current_time, user_id)
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: –≤—Ä–µ–º—è={reminder_time}, —á–∞—Å—Ç–æ—Ç–∞={frequency}, –ø–æ—Å–ª–µ–¥–Ω—è—è_–æ—Ç–ø—Ä–∞–≤–∫–∞={last_sent}, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å={should_send}")
                
                if should_send:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
                    import asyncio
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
                        loop.run_until_complete(self._send_reminder(user_id, message, reminder_id, frequency))
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
                        loop.close()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
                        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å loop –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                        try:
                            if 'loop' in locals():
                                loop.close()
                        except:
                            pass
                    
                    # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É–¥–∞–ª—è–µ–º –∏—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if frequency == 'once':
                        cursor.execute('''
                            DELETE FROM reminders 
                            WHERE id = ?
                        ''', (reminder_id,))
                        logger.info(f"üóëÔ∏è –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    else:
                        # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        cursor.execute('''
                            UPDATE reminders 
                            SET last_sent = ? 
                            WHERE id = ?
                        ''', (current_time.strftime('%Y-%m-%d %H:%M:%S'), reminder_id))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
        
        conn.commit()
        conn.close()
    
    def _should_send_reminder(self, reminder_time: str, frequency: str, last_sent: str, current_time: datetime, user_id: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        
        if frequency == 'once':
            # –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            try:
                # –í—Ä–µ–º—è –≤ –±–∞–∑–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
                moscow_tz = pytz.timezone('Europe/Moscow')
                target_time = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M')
                target_time = moscow_tz.localize(target_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ –∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                if current_time >= target_time and not last_sent:
                    logger.info(f"–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time} >= –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {target_time}, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏")
                    return True
                else:
                    logger.info(f"–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time} < –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {target_time} –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏")
                    return False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                return False
        
        elif frequency == 'daily':
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            try:
                target_time = datetime.strptime(reminder_time, '%H:%M').time()
                current_time_only = current_time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if current_time_only >= target_time:
                    if not last_sent:
                        return True
                    
                    last_sent_dt = datetime.strptime(last_sent, '%Y-%m-%d %H:%M:%S')
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
                    return last_sent_dt.date() < current_time.date()
                
                return False
            except:
                return False
        
        elif frequency == 'weekdays':
            # –ü–æ –±—É–¥–Ω—è–º (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
            if current_time.weekday() < 5:  # 0-4 —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
                try:
                    target_time = datetime.strptime(reminder_time, '%H:%M').time()
                    current_time_only = current_time.time()
                    
                    if current_time_only >= target_time:
                        if not last_sent:
                            return True
                        
                        last_sent_dt = datetime.strptime(last_sent, '%Y-%m-%d %H:%M:%S')
                        return last_sent_dt.date() < current_time.date()
                    
                    return False
                except:
                    return False
            return False
        
        elif frequency == 'weekends':
            # –ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º (—Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            if current_time.weekday() >= 5:  # 5-6 —ç—Ç–æ —Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                try:
                    target_time = datetime.strptime(reminder_time, '%H:%M').time()
                    current_time_only = current_time.time()
                    
                    if current_time_only >= target_time:
                        if not last_sent:
                            return True
                        
                        last_sent_dt = datetime.strptime(last_sent, '%Y-%m-%d %H:%M:%S')
                        return last_sent_dt.date() < current_time.date()
                    
                    return False
                except:
                    return False
            return False
        
        elif 'times_daily' in frequency:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
            times_per_day = int(frequency.split('_')[0])
            try:
                if not last_sent:
                    return True
                
                last_sent_dt = datetime.strptime(last_sent, '%Y-%m-%d %H:%M:%S')
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                if last_sent_dt.date() < current_time.date():
                    return True
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                conn = sqlite3.connect(self.bot_instance.db_path)
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT COUNT(*) FROM reminders 
                    WHERE user_id = ? 
                    AND DATE(last_sent) = DATE(?)
                    AND frequency = ?
                ''', (user_id, current_time.strftime('%Y-%m-%d'), frequency))
                
                sent_today = cursor.fetchone()[0]
                conn.close()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
                return sent_today < times_per_day
                
            except:
                return False
        
        elif frequency in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            day_mapping = {
                'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3,
                'friday': 4, 'saturday': 5, 'sunday': 6
            }
            
            target_day = day_mapping[frequency]
            current_day = current_time.weekday()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            if current_day == target_day:
                try:
                    target_time = datetime.strptime(reminder_time, '%H:%M').time()
                    current_time_only = current_time.time()
                    
                    if current_time_only >= target_time:
                        if not last_sent:
                            return True
                        
                        last_sent_dt = datetime.strptime(last_sent, '%Y-%m-%d %H:%M:%S')
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
                        return last_sent_dt.date() < current_time.date()
                    
                    return False
                except:
                    return False
            
            return False
        
        return False
    
    async def _send_reminder(self, user_id: int, message: str, reminder_id: int, frequency: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if frequency == 'once':
                reminder_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{message}\n\n‚úÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ."
            else:
                reminder_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{message}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            if not self.application.bot:
                logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.application.bot.send_message(chat_id=user_id, text=reminder_text)
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
            
        except Exception as e:
            error_msg = str(e).lower()
            if "bot was blocked by the user" in error_msg or "chat not found" in error_msg:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}")
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    conn = sqlite3.connect(self.bot_instance.db_path)
                    cursor = conn.cursor()
                    cursor.execute('''
                        UPDATE reminders 
                        SET is_active = 0 
                        WHERE id = ?
                    ''', (reminder_id,))
                    conn.commit()
                    conn.close()
                except Exception as db_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {db_error}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: —Ç–∏–ø={type(e).__name__}, —Å–æ–æ–±—â–µ–Ω–∏–µ={str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
    BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
    
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN!")
        print("–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
        print("–î–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list", list_reminders))
    application.add_handler(CommandHandler("delete", delete_reminder))
    application.add_handler(CommandHandler("timezone", timezone_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = SchedulerManager(bot, application)
    scheduler.start_scheduler()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("üìù –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞")
    application.run_polling()

if __name__ == '__main__':
    main()
